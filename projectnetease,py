#Latest Edited:11.25.2018
#根据监管规定，本项目仅用于测试与学习用途。请勿用作商业用途。请在合法范围内使用。
#Developer:KZ

import requests, sys, click, re, base64, binascii, json, os
from Crypto.Cipher import AES#使用crypto模块进行AES加密和解密
from http import cookiejar#需要登录

class Encrypyed():
	#解密算法（原理复杂，引用自Jack-Cherish的GitHub）
	def __init__(self):
		self.modulus = '00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7'
		self.nonce = '0CoJUm6Qyw8W8jud'
		self.pub_key = '010001'
 	# 登录加密算法, 基于https://github.com/stkevintan/nw_musicbox脚本实现
	def encrypted_request(self, text):
		text = json.dumps(text)
		sec_key = self.create_secret_key(16)
		enc_text = self.aes_encrypt(self.aes_encrypt(text, self.nonce), sec_key.decode('utf-8'))
		enc_sec_key = self.rsa_encrpt(sec_key, self.pub_key, self.modulus)
		data = {'params': enc_text, 'encSecKey': enc_sec_key}
		return data
	def aes_encrypt(self, text, secKey):
		pad = 16 - len(text) % 16
		text = text + chr(pad) * pad
		encryptor = AES.new(secKey.encode('utf-8'), AES.MODE_CBC, b'0102030405060708')
		ciphertext = encryptor.encrypt(text.encode('utf-8'))
		ciphertext = base64.b64encode(ciphertext).decode('utf-8')
		return ciphertext
	def rsa_encrpt(self, text, pubKey, modulus):
		text = text[::-1]
		rs = pow(int(binascii.hexlify(text), 16), int(pubKey, 16), int(modulus, 16))
		return format(rs, 'x').zfill(256)
	def create_secret_key(self, size):
		return binascii.hexlify(os.urandom(size))[:16]
    
class Song():
	#歌曲信息
	def __init__(self, song_id, song_name, song_num, song_url=None):
		self.song_id = song_id
		self.song_name = song_name
		self.song_num = song_num
		self.song_url = '' if song_url is None else song_url#若URL存在则赋值
        
class finder():
	#爬取API
    #部分思路引用自Jack-Cherish的GitHub
	def __init__(self, timeout=60, cookie_path='.'):
		self.headers = {
			'Accept': '*/*',
			'Accept-Encoding': 'gzip,deflate,sdch',
			'Accept-Language': 'zh-CN,zh;q=0.8,gl;q=0.6,zh-TW;q=0.4',
			'Connection': 'keep-alive',
			'Content-Type': 'application/x-www-form-urlencoded',
			'Host': 'music.163.com',
			'Referer': 'http://music.163.com/search/',
			'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36'
		}
		self.session = requests.Session()
		self.session.headers.update(self.headers)
		self.session.cookies = cookiejar.LWPCookieJar(cookie_path)
		self.download_session = requests.Session()
		self.timeout = timeout
		self.ep = Encrypyed()
        
	def post_request(self, url, params):
		"""
		Post请求
		return: 字典
		"""
		data = self.ep.encrypted_request(params)
		resp = self.session.post(url, data=data, timeout=self.timeout)
		result = resp.json()
		if result['code'] != 200:
			click.echo('post_request error')
		else:
		    return result
        
	def search(self, search_content, search_type, limit=9):
		"""
		搜索API
		search_content: 搜索内容
		search_type: 搜索类型
		limit: 返回结果数量
		return: 字典
		"""
		url = 'http://music.163.com/weapi/cloudsearch/get/web?csrf_token='
		params = {'s': search_content, 'type': search_type, 'offset': 0, 'sub': 'false', 'limit': limit}
		result = self.post_request(url, params)
		return result
    
	def search_song(self, song_name, song_num, quiet=True, limit=9):
		"""
		根据歌曲名搜索
		song_name: 歌曲名
		song_num: 下载的歌曲数
		quiet: 最优匹配
		limit: 可用数量
		return: 独享
		"""
		result = self.search(song_name, search_type=1, limit=limit)
		if result['result']['songCount'] <= 0:
			click.echo('Song {} not existed.'.format(song_name))
		else:
			songs = result['result']['songs']
			if quiet:
				song_id, song_name = songs[0]['id'], songs[0]['name']
				song = Song(song_id=song_id, song_name=song_name, song_num=song_num)
				return song
            
	def get_song_url(self, song_id, bit_rate=320000):
#这里加入了320K优先
		"""
		获得URL
		song_id: 音乐ID<int>.
		bit_rate: {'MD 128k': 128000, 'HD 320k': 320000}
		return: 歌曲下载地址
		"""
		url = 'http://music.163.com/weapi/song/enhance/player/url?csrf_token='
		csrf = ''
		params = {'ids': [song_id], 'br': bit_rate, 'csrf_token': csrf}
		result = self.post_request(url, params)
		# 歌曲下载地址
		song_url = result['data'][0]['url']
 		# 歌曲不存在
		if song_url is None:
			click.echo('Song {} is not available due to copyright issue.'.format(song_id))
		else:
			return song_url
        
	def get_song_by_url(self, song_url, song_name, song_num, folder):
		"""
		下载
		song_url: 歌曲URL
		song_name: 歌曲名字
		song_num: 下载数
		folder: 相对路径
		"""
		if not os.path.exists(folder):#若保存路径不可用
			os.makedirs(folder)
		fpath = os.path.join(folder, str(song_num) + '_' + song_name + '.mp3')#创建空mp3文件
		if sys.platform == 'win32' or sys.platform == 'cygwin':
			valid_name = re.sub(r'[<>:"/\\|?*]', '', song_name)#在Windows下，有些字符不被支持
			if valid_name != song_name:
				click.echo('{} will be saved as: {}.mp3'.format(song_name, valid_name))
				fpath = os.path.join(folder, str(song_num) + '_' + valid_name + '.mp3')
		
		if not os.path.exists(fpath):
			resp = self.download_session.get(song_url, timeout=self.timeout, stream=True)
			length = int(resp.headers.get('content-length'))
			label = 'Downloading {} {}kb'.format(song_name, int(length/1024))
			with click.progressbar(length=length, label=label) as progressbar:
				with open(fpath, 'wb') as song_file:
					for chunk in resp.iter_content(chunk_size=1024):#以1024为单位
						if chunk:
							song_file.write(chunk)#连续小包写入文件
							progressbar.update(1024)
                            
class Netease():
#
	def __init__(self, timeout, folder, quiet, cookie_path):
		self.finder = finder(timeout, cookie_path)
		self.folder = '.' if folder is None else folder
		self.quiet = quiet
	def download_song_by_search(self, song_name, song_num):
#
		try:
			song = self.finder.search_song(song_name, song_num, self.quiet)#调用finder找这首歌
		except:
			click.echo('download_song_by_serach error')#异常处理
#
		if song != None:#按照finder返回的song信息下载
			self.download_song_by_id(song.song_id, song.song_name, song.song_num, self.folder)
	def download_song_by_id(self, song_id, song_name, song_num, folder='.'):
#
		try:
			url = self.finder.get_song_url(song_id)
#
			song_name = song_name.replace('/', '')
			song_name = song_name.replace('.', '')#无效字符处理
			self.finder.get_song_by_url(url, song_name, song_num, folder)#调用finder.get_song_by_url函数下载
		except:
			click.echo('download_song_by_id error')#异常处理
            
if __name__ == '__main__':
	timeout = 60
	output = 'Musics'#下载好的文件在Music里
	quiet = True
	cookie_path = 'Cookie'
	netease = Netease(timeout, output, quiet, cookie_path)
	music_list_name = 'music_list.txt'#下载的歌曲列表请写在一个music_list文本文件中，并保存为文本文档。输入一行歌名，回车下一行继续输入。不需要输入“《之类的符号。
#
	if os.path.exists(music_list_name):#请把歌曲列表文档放在绝对目录中
		with open(music_list_name, 'r') as f:#只读方式打开这个文档
			music_list = list(map(lambda x: x.strip(), f.readlines()))#调用map根据按行读入的文本（忽略换行等无效字符）生成一个list
		for song_num, song_name in enumerate(music_list):
			netease.download_song_by_search(song_name,song_num + 1)#传给download_song_by_search函数
		print('Download finished! Developer:Kris Zhang(张泽平)')
	else:
		click.echo('music_list.txt not exist.') #如果歌单文件不存在的报错
